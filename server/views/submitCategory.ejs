<!DOCTYPE html>
<html lang="en">

<head>

    <title>Azodu - Create a category</title>

    <%- include('includes/header') %>


        <script>
            
                function generateCategoryPermalink() {
                    const title = document.getElementById('suggestedPermalink').value;
                    const basePath = "";
                    const cleanedTitle = title
                        .replace(/[^\w\s]/gi, '') // Remove non-alphanumeric characters except spaces
                        .trim() // Remove leading and trailing spaces
                        .replace(/\s+/g, '-') // Replace spaces with hyphens
                        .toLowerCase(); // Convert to lowercase

                    const truncatedTitle = cleanedTitle.substring(0, 147); // Truncate to 147 characters to leave room for "/c/"
                    const permalink = basePath + truncatedTitle;

                    document.getElementById('displayPermalink').textContent = `azodu.com/c/${permalink}`;
                    // Update hidden input to send to server
                    document.getElementById('finalPermalink').value = permalink;
                }


                function getCategoryPermalinkFromUrl() {
                    const urlParams = new URLSearchParams(window.location.search);
                    return urlParams.get('permalink'); // Assuming "permalink" is the query parameter
                }

        </script>

        <div class="container submitCategoryPage">
            <div class="submission-form">
                <form id="submit_category_form" action="/submitCategory" method="POST">
                    <h2>Create a new category</h2>

                    <input type="text" id="categoryName" name="name" placeholder="Enter category name" required>

                    <input type="text" id="suggestedPermalink" name="suggestedPermalink" placeholder="Enter a link"
                        oninput="generateCategoryPermalink()" required>

                    <p id="displayPermalink">azodu.com/c/</p>
                    <input type="hidden" id="finalPermalink" name="permalink">
                    <br />
                    <div class="tooltip cat_tooltip">
                        <span class="help-icon">
                            Relevancy prompt<i class="fas fa-question-circle"></i>
                        </span>
                        <span class="tooltiptext">The AI moderator allows submissions to this category if they fit the
                            following description. This info also appears in the sidebar.</span>
                    </div>


                    <div id="categoryDescription" class="contentField">
                        <textarea id="categoryDescText" name="description"
                            placeholder="Describe the category as accurately as possible"></textarea>
                    </div>
                    <br />
                    <div class="tooltip cat_tooltip">
                        <span class="help-icon">
                            Additional info<i class="fas fa-question-circle"></i>
                        </span>
                        <span class="tooltiptext">This additional info appears in the sidebar below the description. The info is purely for users and is not used by AI to determine relevancy on submissions.</span>
                    </div>
                    <div id="categoryAdditionalInfo" class="contentField">
                        <textarea id="categoryAdditionalInfoText" name="additional_info"
                                  placeholder="Additional info (will appear in the sidebar)"></textarea>
                      </div>
                      

                    <!--
            <label for="categoryModerators">Moderators:</label>
            <input type="text" id="categoryModerators" name="moderators" placeholder="Enter moderator usernames, separated by commas">
            -->
                    <button type="submit" id="create_category_submit_button">Create Category</button>
                </form>
            </div>
            <div id="category_submit_info">
                <h3 style="margin-top:0;">No-frills community building</h3>
                <ul>
                    <li>Sit back and let the AI moderate!</li>
                    <li>The AI rejects inappropriate content and anything that isn't relevant to the description you provide.</li>

                    <li>Your username gets a unique <span class="cat_creator">color</span> in comments.</li>

                    <li>Your username appears as the creator in the sidebar.</li>


                </ul>
            </div>
        </div>


        <%- include('includes/sidebar', { category: category || null }) %>
        <script>
            new Quill('#categoryAdditionalInfo', {
                modules: {
                    toolbar: [
                        ['bold', 'italic', 'underline', 'strike'],        // formatting options
                        [{ 'list': 'ordered' }, { 'list': 'bullet' }],    // lists
                        ['link']                                          // links
                    ]
                },
                theme: 'snow', // Specify theme in configuration
                placeholder: 'Describe the category (will appear in the sidebar)',
            });


            $(document).ready(function () {

                const permalink = getCategoryPermalinkFromUrl();
              if (permalink) {
                  fetch(`/api/categories/${permalink}`, {
                          method: 'GET',
                          headers: {

                              'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                          }
                      })
                      .then(response => {
                          if (!response.ok) throw new Error('Failed to fetch category details');
                          return response.json();
                      })
                      .then(data => {
                          if (data.category) {
                              console.log(data.category.additional_info);
                              $('#suggestedPermalink').css({
                                  'display': 'none'
                              });
                              $('#categoryName').val(data.category.name);
                              $('#suggestedPermalink').val(data.category.permalink).trigger('input');
                              $('#categoryDescText').val(data.category.description);
                              $('#categoryAdditionalInfo .ql-editor').html(data.category.additional_info || '');
                          }
                      })
                      .catch(error => {
                          console.error('Error:', error);
                      });
              }

                $('#submit_category_form').on('submit', function (e) {
                    e.preventDefault(); // Prevent default form submission

                    $('button[type="submit"]').prop('disabled', true).text('Submitting...');


                    // Retrieve values from form elements using jQuery
                    const name = $('#categoryName').val();
                    const permalinkFromClient = $('#finalPermalink').val();
                    const description = $('#categoryDescText').val(); 
                    const additionalInfo = $('#categoryAdditionalInfo .ql-editor').html();

                    // Prepare data to be sent
                    const formData = {
                        name,
                        permalinkFromClient,
                        description,
                        additional_info: additionalInfo
                    };

                    // Retrieve the authToken from local storage
                    const authToken = localStorage.getItem('authToken');

                    // Use fetch API to submit the form data along with the authToken in the header
                    fetch('/submitCategory', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${authToken}` // Include the auth token in the request headers
                        },
                        body: JSON.stringify(formData) // Convert formData object to JSON string
                    })
                        .then(response => response.json()) // First, parse JSON response
                        .then(data => {
                            if (data.message) {

                                if (!data.error) {
                                $('button[type="submit"]').text('Success!');

                                } else {
                                    
                                $('button[type="submit"]').prop('disabled', false).text('Submit');


                                }

                                // Check if there is a message property in the response data
                                showNotification(data.message, data.error ? 'error' : 'success', 3000, () => {
                                    if (!data.error) {
                                        // Redirect only on success
                                        window.location.href = "/";
                                    }
                                });
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            showNotification('There was an error processing your request.', 'error', 3000);
                            $('button[type="submit"]').prop('disabled', false).text('Submit');

                        });
                });
            });



        </script>
        </body>

</html>