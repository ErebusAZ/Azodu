<!DOCTYPE html>
<html lang="en">

<head>

  <title>Azodu - Submit a post</title>
  <%- include('includes/header') %>



    <script>
      function togglePostContentField() {
        var postType = document.getElementById('postType').value;
        var postTitle = document.getElementById('postTitle');
        var postContentText = document.getElementById('postContentText');
        var postContentUrl = document.getElementById('postContentUrl');
        var urlContent = document.getElementById('urlContent');

        // Clear all fields when switching post types
        if (postTitle) postTitle.value = '';
        if (postContentText) postContentText.value = '';
        if (postContentUrl) postContentUrl.value = '';

        if (postType === 'text') {
          $('#submit_post_form .ql-toolbar,#submit_post_text').show();
          if (urlContent) urlContent.style.display = 'none';
          // Set required attributes for text post
          if (postTitle) postTitle.setAttribute('required', '');
          if (postContentText) postContentText.setAttribute('required', '');
          // Remove required attribute for URL post, if present
          if (postContentUrl) postContentUrl.removeAttribute('required');
        } else if (postType === 'url') {
          $('#submit_post_form .ql-toolbar,#submit_post_text').hide();
          if (urlContent) urlContent.style.display = '';
          // Remove required attributes for text post
          if (postTitle) postTitle.setAttribute('required', '');
          if (postContentText) postContentText.removeAttribute('required');
          // Set required attribute for URL post
          if (postContentUrl) postContentUrl.setAttribute('required', '');
        }
      }
        $(document).ready(function () {
          $('#postType').change(togglePostContentField);

          function getQueryParamByName(name) {
            var url = window.location.href;
            name = name.replace(/[\[\]]/g, "\\$&");
            var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
              results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, " "));
          }

          function setCategoryDescription(description) {
            description = `<p style="color: #dcdc7a; padding-top:0;margin-top: 0;">Post must be relevant to the following ...</p>` + description; 
            $('#categoryRelevanceDescription').html(description || 'Select a category to see the description.');
          }

          function fetchAndPopulateCategories() {
            let selectedCategory = "anything";
            selectedCategory = getQueryParamByName('cat') ? getQueryParamByName('cat') : selectedCategory;

            $.ajax({
              url: '/api/categories',
              type: 'GET',
              success: function (categories) {
                const $categorySelect = $('#category');
                $categorySelect.empty(); // Clear existing options
                let initialDescription = '';

                categories.forEach(function (category) {
                  const option = $('<option></option>').val(category.permalink).text(category.name + ' - /c/' + category.permalink);
                  option.data('description', category.description); // Store the description in the option
                  $categorySelect.append(option);
                  if (category.permalink === selectedCategory) {
                    option.prop('selected', true); // Set as selected if matches the query parameter
                    initialDescription = category.description; // Set the initial description based on the selected category
                  }
                });

                setCategoryDescription(initialDescription); // Set the initial description
                $('#category').change(function () {
                  // Update the description when the category changes
                  const selectedOption = $(this).find('option:selected');
                  setCategoryDescription(selectedOption.data('description'));
                });
              },
              error: function (error) {
                console.error('Failed to fetch categories:', error);
              }
            });
          }

          fetchAndPopulateCategories();
        });



    </script>


    <div class="container" id="submit_post_page">




      <div class="submission-form">
        <form id="submit_post_form" action="/submitPost" method="POST">

          <h2>Submit a new post</h2>

          <label for="postType">Post type:</label>
          <select id="postType" name="postType" onchange="togglePostContentField()">
            <option value="text">Text</option>
            <option value="url">URL</option>
          </select>

          <label for="category">Category:</label>
          <select id="category" name="category" required>
            <option value="">Select a category...</option>
            <!-- Options will be added here by the JavaScript -->
          </select>



          <label for="postTitle">Title:</label>
          <input type="text" id="postTitle" name="title" placeholder="Enter post title" required>


          <div id="submit_post_text" class="contentField">
            <textarea id="postContentText" name="contentText" placeholder="Enter text"></textarea>

          </div>

          <div id="urlContent" class="contentField" style="display: none;">
            <label for="postContentUrl">URL:</label>
            <input type="url" id="postContentUrl" name="contentUrl" placeholder="Enter URL">
          </div>

          <input type="hidden" id="quillContentText" name="contentText">
          
          <div id="categoryRelevanceDescription"></div>

          <!-- Checkbox for content policy agreement -->
          <div class="form-check" id="content_policy_checkbox_container">
            <input type="checkbox" id="contentPolicyCheckbox" name="contentPolicyCheckbox" required>
            <label id="policy_checkbox_label" for="contentPolicyCheckbox">My post is relevant to the above category description and does not violate the Azodu content policy.</label>
          </div>
          
          <button type="submit">Submit</button>
          

        </form>
      </div>






    </div>


    <%- include('includes/sidebar', { category: category || null }) %>

      <script>
        var quill = new Quill('#submit_post_text', {
          modules: {
            toolbar: [
              ['bold', 'italic', 'underline', 'strike', 'blockquote'], // grouped buttons
              [{ 'list': 'ordered' }, { 'list': 'bullet' }],
              ['link'] // links and image embed buttons
            ]
          },
          theme: 'snow',
          placeholder: 'Enter text',
        });


        document.querySelector('form').addEventListener('submit', function (e) {
          var html = quill.root.innerHTML;
          console.log(html); // Debug: what does Quill give us at this point?
          document.getElementById('quillContentText').value = html;
        });




        $('form#submit_post_form').on('submit', function (e) {
          e.preventDefault(); // Prevent the form from submitting through the browser

          var postType = $('#postType').val();
          var title = $('#postTitle').val();
          var category = $('#category').val();
          var contentText = postType === 'text' ? quill.root.innerHTML : null;
          var contentUrl = postType === 'url' ? $('#postContentUrl').val() : null;

          // Check if the content policy checkbox is checked
          var isPolicyChecked = $('#contentPolicyCheckbox').is(':checked');
          if (!isPolicyChecked) {
            alert('Please confirm that your post adheres to the content policy.');
            return; // Stop the form submission if policy is not confirmed
          }

          contentText = processHTMLFromUsers(contentText);

          if (postType === 'text') {
            var result = validateComment(contentText);
            if (!result.isValid) {
              showNotification('Comment is too short or unsubstantive.', 'error', 5000);
              return;
            }
          }

          $('button[type="submit"]').prop('disabled', true).text('Submitting...');

          // Prepare the formData object
          var formData = {
            title: title,
            category: category,
            postType: postType,
            contentText: contentText,
            contentUrl: contentUrl
          };

          // Get the authToken from local storage
          var authToken = localStorage.getItem('authToken');

          // Make the Fetch API request to submit the post data
          fetch('/submitPost', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer ' + authToken  // Include the auth token in the request headers
            },
            body: JSON.stringify(formData)
          })
            .then(response => response.json()) // Always parse JSON, regardless of the response status
            .then(data => {
              if (data.status == "error") {
                throw new Error(data.message); // Use the server-provided error message
                console.log('data error');
              } else {
                $('button[type="submit"]').text('Success!');
                showNotification(data.message, 'success', 4000, function () { window.location.href = "/"; });

              }

            })
            .catch(error => {
              console.log(error);
              showNotification(error.message || 'There was an error submitting your post.', 'error', 10000);
              $('button[type="submit"]').prop('disabled', false).text('Submit');

            })
        });



      </script>

      </body>

</html>