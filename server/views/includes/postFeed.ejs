<div class="container" id="postfeed_container">
    <div class="sort-container_new">
        <ul id="sort-by">
            <li><a href="#" data-sort="top">Top</a></li>
            <li><a href="#" data-sort="new" class="selected">Latest</a></li>
            <li><a href="#" data-sort="hot">Hot</a></li>
        </ul>
    </div>
</div>

<script>
    $(document).ready(function () {
        const totalNumberOfPosts = 400; // Max posts to generate
        const postsToShowInitially = 25; // Posts to show initially and on each scroll
        let lastPostId = null; // Keeps track of the last post ID fetched
        let isFetching = false;
        var currentPage = 1; // Initialize current page
        var postsShown = 0;


        function renderPosts(posts, isSaved) {
            let postsHtml = '';
            for (let i = 0; i < posts.length; i++) {
                postsHtml += generatePostHtml(posts[i], isSaved);
            }
            $('.container').append(postsHtml);
        }

        function fetchAndDisplayPosts() {
            if (isFetching) return;
            isFetching = true;
            const cat = getCategoryFromCurrentUrl();
            const url = lastPostId ? `/api/posts?startPostId=${lastPostId}&category=${cat}` : `/api/posts?category=${cat}`;

            $.ajax({
                url: url,
                type: 'GET',
                success: function (posts) {
                    console.log(posts);
                    isFetching = false;
                    if (posts.length > 0) {
                        lastPostId = posts[posts.length - 1].post_id;
                        if (currentPage > 1) {
                            const pageDividerHtml = `<div style="clear:both;"></div><div class="page-divider">Page ${currentPage}</div>`;
                            $('.container').append(pageDividerHtml);
                        }
                        currentPage++;
                        renderPosts(posts,false);
                    }
                },
                error: function (error) {
                    console.error('Failed to fetch posts:', error);
                }
            });
        }

        function getCategoryFromCurrentUrl() {
            const pathSegments = window.location.pathname.split('/').filter(Boolean);
            const cIndex = pathSegments.findIndex(segment => segment === 'c');
            return cIndex !== -1 && cIndex + 1 < pathSegments.length ? pathSegments[cIndex + 1] : null;
        }

        // Initially load the default number of posts
        fetchAndDisplayPosts();



        function generateLoremIpsum(wordCount) {
            const words = ["lorem", "ipsum", "dolor", "sit", "amet", "consectetur", "adipiscing", "elit", "sed", "do", "eiusmod", "tempor", "incididunt", "ut", "labore", "et", "dolore", "magna", "aliqua"];
            let result = "";
            for (let i = 0; i < wordCount; i++) {
                result += words[Math.floor(Math.random() * words.length)] + " ";
            }
            return result.trim();
        }


        function showSkeletonPosts(numberOfSkeletons) {
            let skeletonHTML = '';
            for (let i = 0; i < numberOfSkeletons; i++) {
                skeletonHTML += `
    <div class="post skeleton">
        <div class="voting">
            <div class="skeleton-loader" style="height: 56px; width: 18px;"></div>
        </div>
        <div class="thumbnail skeleton-loader"></div>
        <div class="content">
            <div class="post-title skeleton-loader" style="height: 20px; margin: 10px 0;"></div>
            <div class="post-description skeleton-loader" style="height: 10px; width: 80%;"></div>
            <div class="post-links">
                <div class="skeleton-loader" style="height: 10px; width: 30%; margin: 5px 0;"></div>
            </div>
        </div>
    </div>`;
            }
            $('.container').append(skeletonHTML);
        }



        // Function to check if we're near the bottom of the page
        function nearBottomOfPage() {
            return $(window).scrollTop() + $(window).height() > $(document).height() - 100;
        }

        // Lazy load more posts as the user scrolls down
        $(window).scroll(function () {
            if (nearBottomOfPage() && postsShown < totalNumberOfPosts) {
                fetchAndDisplayPosts();
            }
        });

        $('#showMoreBtn').click(function () {
            $('.hidden').removeClass('hidden');
            $(this).hide();
        });





        // Handler for "save" button click
        $('.container').on('click', '.save_post', function (event) {
            event.preventDefault(); // Prevent default action

            // Retrieve the username from localStorage
            const username = localStorage.getItem('username');
            if (!username) {
                console.error('User is not logged in.');
                return; // Exit if no user is logged in
            }

            // Capture the button with a variable before the AJAX request
            const $button = $(this);

            // Get the post ID from the closest .post element
            const $post = $button.closest('.post');
            const postId = $post.data('postid');
            const cat = $post.data('postcat');
            const authToken = localStorage.getItem('authToken'); // Assuming the auth token is saved in localStorage

            // Make an AJAX request to save the post
            $.ajax({
                url: '/api/savePost', // Endpoint for saving a post
                type: 'POST',
                contentType: 'application/json',
                headers: {
                    'Authorization': `Bearer ${authToken}` // Use the authToken for authorization
                },
                data: JSON.stringify({ postId: postId, category: cat }), // Send the postId and category in the request body
                success: function (response) {
                    console.log('Post saved successfully:', response);
                $button.text('saved')
                $button.css({'color':'gray'});
                },
                error: function (xhr, status, error) {
                    console.error('Failed to save post:', error);
                    showNotification('Failed to save post: ' + error,'error', 3000);


                }
            });
        });




        function pinPost(category, post_id) {
            // Retrieve the authToken stored in localStorage
            const authToken = localStorage.getItem('authToken');
            if (!authToken) {
                console.error('User is not logged in or authToken is missing.');
                return;
            }

            // Make a POST request to the pinPost API endpoint
            fetch('/api/pinPost', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${authToken}` // Use the authToken for authentication
                },
                body: JSON.stringify({ category, post_id }) // Send category and post_id in the request body
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json(); // Parse the JSON response body
                })
                .then(data => console.log(data)) // Log the response data
                .catch(error => console.error('Error pinning post:', error)); // Log any errors
        }


    });


</script>