<div class="container" id="postfeed_container">
    <div class="sort-container_new">
        <ul id="sort-by">
            <li><a href="#" data-sort="top">Top</a></li>
            <li><a href="#" data-sort="latest" class="selected">Latest</a></li>
            <li><a href="#" data-sort="controversial">Controversial</a></li>
        </ul>
    </div>
</div>

<script>
    $(document).ready(function () {
        let currentSort = 'latest'; // Default sort

        const totalNumberOfPosts = 400; // Max posts to generate
        const postsToShowInitially = 25; // Posts to show initially and on each scroll
        let lastPostId = null; // Keeps track of the last post ID fetched
        let isFetching = false;
        var currentPage = 1; // Initialize current page
        var postsShown = 0;
        var allPostsLoaded = false; // Flag to indicate whether all posts have been loaded


        let shownPinnedPosts = new Set(); // Tracks shown pinned posts to avoid duplicates

        function renderPosts(posts, isSaved) {
            let postsHtml = '';
            for (let i = 0; i < posts.length; i++) {
                if (!shownPinnedPosts.has(posts[i].post_id)) {
                    postsHtml += generatePostHtml(posts[i], isSaved);
                    if (posts[i].isPinned) {
                        shownPinnedPosts.add(posts[i].post_id); // Track shown pinned posts
                    }
                }
            }
            $('.container').append(postsHtml);
        }

        function fetchAndDisplayPosts(sort) {
            if (isFetching || allPostsLoaded) return;
            isFetching = true;
            let cat = getCategoryFromCurrentUrl() || 'anything';
            const url = lastPostId ? `/api/posts?startPostId=${lastPostId}&category=${cat}&sort=${sort}` : `/api/posts?category=${cat}&sort=${sort}`;

            $.ajax({
                url: url,
                type: 'GET',
                success: function (posts) {
                    console.log('Received Posts:', posts);
                    isFetching = false;
                    if (posts.length > 0) {
                        lastPostId = posts[posts.length - 1].post_id;
                        renderPosts(posts, false);
                    } else {
                        allPostsLoaded = true;
                    }
                },
                error: function (error) {
                    console.error('Failed to fetch posts:', error);
                    isFetching = false;
                }
            });
        }

      // Change sort and fetch posts when a sort option is clicked
      $('#sort-by li a').click(function (e) {
            e.preventDefault();
            const sortType = $(this).data('sort');
            if (currentSort !== sortType) {
                $('#sort-by li a.selected').removeClass('selected');
                $(this).addClass('selected');
                currentSort = sortType;
                lastPostId = null; // Reset to fetch from the beginning
                allPostsLoaded = false; // Reset the end of list flag
                $('div.post').remove(); // Clear existing posts
                console.log(sortType); 
                fetchAndDisplayPosts(sortType);
            }
        });

        function getCategoryFromCurrentUrl() {
            const pathSegments = window.location.pathname.split('/').filter(Boolean);
            const cIndex = pathSegments.findIndex(segment => segment === 'c');
            if (cIndex !== -1 && cIndex + 1 < pathSegments.length) {
                return pathSegments[cIndex + 1];
            }
            return "anything"; // Return default category if no category is found
        }


        // Initially load the default number of posts
        fetchAndDisplayPosts(currentSort);



        function generateLoremIpsum(wordCount) {
            const words = ["lorem", "ipsum", "dolor", "sit", "amet", "consectetur", "adipiscing", "elit", "sed", "do", "eiusmod", "tempor", "incididunt", "ut", "labore", "et", "dolore", "magna", "aliqua"];
            let result = "";
            for (let i = 0; i < wordCount; i++) {
                result += words[Math.floor(Math.random() * words.length)] + " ";
            }
            return result.trim();
        }


        function showSkeletonPosts(numberOfSkeletons) {
            let skeletonHTML = '';
            for (let i = 0; i < numberOfSkeletons; i++) {
                skeletonHTML += `
    <div class="post skeleton">
        <div class="voting">
            <div class="skeleton-loader" style="height: 56px; width: 18px;"></div>
        </div>
        <div class="thumbnail skeleton-loader"></div>
        <div class="content">
            <div class="post-title skeleton-loader" style="height: 20px; margin: 10px 0;"></div>
            <div class="post-description skeleton-loader" style="height: 10px; width: 80%;"></div>
            <div class="post-links">
                <div class="skeleton-loader" style="height: 10px; width: 30%; margin: 5px 0;"></div>
            </div>
        </div>
    </div>`;
            }
            $('.container').append(skeletonHTML);
        }



        // Function to check if we're near the bottom of the page
        function nearBottomOfPage() {
            return $(window).scrollTop() + $(window).height() > $(document).height() - 100;
        }

        // Lazy load more posts as the user scrolls down
        $(window).scroll(function () {
            if (nearBottomOfPage() && postsShown < totalNumberOfPosts && !allPostsLoaded) {
                fetchAndDisplayPosts(currentSort);
            }
        });

        $('#showMoreBtn').click(function () {
            $('.hidden').removeClass('hidden');
            $(this).hide();
        });





        // Handler for "save" button click
        $('.container').on('click', '.save_post', function (event) {
            event.preventDefault(); // Prevent default action

            // Retrieve the username from localStorage
            const username = localStorage.getItem('username');
            if (!username) {
                console.error('User is not logged in.');
                return; // Exit if no user is logged in
            }

            // Capture the button with a variable before the AJAX request
            const $button = $(this);

            // Get the post ID from the closest .post element
            const $post = $button.closest('.post');
            const postId = $post.data('postid');
            const cat = $post.data('postcat');
            const authToken = localStorage.getItem('authToken'); // Assuming the auth token is saved in localStorage

            // Make an AJAX request to save the post
            $.ajax({
                url: '/api/savePost', // Endpoint for saving a post
                type: 'POST',
                contentType: 'application/json',
                headers: {
                    'Authorization': `Bearer ${authToken}` // Use the authToken for authorization
                },
                data: JSON.stringify({ postId: postId, category: cat }), // Send the postId and category in the request body
                success: function (response) {
                    console.log('Post saved successfully:', response);
                    $button.text('saved')
                    $button.css({ 'color': 'gray' });
                },
                error: function (xhr, status, error) {
                    console.error('Failed to save post:', error);
                    showNotification('Failed to save post: ' + error, 'error', 3000);


                }
            });
        });






    });


</script>