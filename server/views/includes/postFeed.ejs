<div class="container">



    <div class="sort-container_new">
        <ul id="sort-by">
            <li><a href="#" data-sort="top">Top</a></li>
            <li><a href="#" data-sort="new" class="selected">Latest</a></li>
            <li><a href="#" data-sort="hot">Hot</a></li>
        </ul>
    </div>



</div>


<script>


    $(document).ready(function () {
        const totalNumberOfPosts = 400; // max posts to generate
        const postsToShowInitially = 25; // Posts to show initially and on each scroll

        showSkeletonPosts(postsToShowInitially); // Or however many you expect to load initially

        let postsShown = 0; // Tracker for how many posts are currently shown

        function generateLoremIpsum(wordCount) {
            const words = ["lorem", "ipsum", "dolor", "sit", "amet", "consectetur", "adipiscing", "elit", "sed", "do", "eiusmod", "tempor", "incididunt", "ut", "labore", "et", "dolore", "magna", "aliqua"];
            let result = "";
            for (let i = 0; i < wordCount; i++) {
                result += words[Math.floor(Math.random() * words.length)] + " ";
            }
            return result.trim();
        }

        // test data
        function generateAndShowPosts(numberOfPosts) {
            // Check if we are adding posts beyond the first set
            if (postsShown > 0) {
                // Add a divider before appending new posts
                const dividerHtml = `<div class="page-divider">Page ${postsShown / postsToShowInitially + 1}</div>`;
                $('.container').append(dividerHtml);
            }

            for (let i = postsShown; i < postsShown + numberOfPosts; i++) {
                const wordCount = Math.floor(Math.random() * 10) + 5; // Random word count between 5 and 15
                // Generate random user and category data for the example
                const username = `user${Math.floor(Math.random() * 100)}`;
                const category = `Category${Math.floor(Math.random() * 10)}`;
                const timeAgo = `${Math.floor(Math.random() * 59) + 1} minutes ago`;

                // Update postHtml with the new "submitted by" line
                const postHtml = `
    <div class="post">
        <div class="voting">
    
            <a title="upvote" description="upvote" href="#" class="upvote" data-postid="123"><img src="/img/up-arrow.svg" alt="Upvote"></a>
    <span class="votes">123</span>
<a title="downvote" description="downvote" href="#" class="downvote" data-postid="123"><img src="/img/down-arrow.svg" alt="Downvote"></a>

        </div>
        <div class="thumbnail"></div>
        <div class="content">
            <a href="internal.html" class="post-title">${generateLoremIpsum(wordCount)}</a>
            <p class="post-description">This is a brief description of post ${i + 1}.</p>
            <p class="post-submitted">submitted ${timeAgo} by <a href="#">${username}</a> to <a href="#">${category}</a></p>
            <div class="post-links">
                <a href="#">100 comments</a>
                <a href="#">save</a>
            </div>
        </div>
    </div>`;
                $('.container').append(postHtml);
            }
            postsShown += numberOfPosts; // Update the tracker
        }

        function showSkeletonPosts(numberOfSkeletons) {
            let skeletonHTML = '';
            for (let i = 0; i < numberOfSkeletons; i++) {
                skeletonHTML += `
    <div class="post skeleton">
        <div class="voting">
            <div class="skeleton-loader" style="height: 56px; width: 18px;"></div>
        </div>
        <div class="thumbnail skeleton-loader"></div>
        <div class="content">
            <div class="post-title skeleton-loader" style="height: 20px; margin: 10px 0;"></div>
            <div class="post-description skeleton-loader" style="height: 10px; width: 80%;"></div>
            <div class="post-links">
                <div class="skeleton-loader" style="height: 10px; width: 30%; margin: 5px 0;"></div>
            </div>
        </div>
    </div>`;
            }
            $('.container').append(skeletonHTML);
        }


        function getCategoryFromCurrentUrl() {
            const pathSegments = window.location.pathname.split('/').filter(Boolean); // Split by '/', remove empty segments
            const cIndex = pathSegments.findIndex(segment => segment === 'c'); // Find index of 'c'
            if (cIndex !== -1 && cIndex + 1 < pathSegments.length) {
                return pathSegments[cIndex + 1]; // Return the segment after 'c'
            }
            return null; // Return null if 'c' is not found or there is no segment after 'c'
        }


        var isFetching = false;

        let lastPostId = null; // Keeps track of the last post ID fetched
        var currentPage = 1; // Initialize current page

        function fetchAndDisplayPosts() {
            if (isFetching) return;
            isFetching = true;
            const cat = getCategoryFromCurrentUrl();
            // Include the lastPostId in the request if available
            const url = (lastPostId ? `/api/posts?startPostId=${lastPostId}&category=` + cat : '/api/posts?category=' + cat);



            $.ajax({
                url: url,
                type: 'GET',
                success: function (posts) {
                    console.log(posts);
                    isFetching = false;

                    if (posts.length > 0) {
                        // Update lastPostId with the ID of the last post in the fetched array
                        lastPostId = posts[posts.length - 1].post_id;

                        if (currentPage > 1) {
                            const pageDividerHtml = `<div style="clear:both;"></div><div class="page-divider">Page ${currentPage}</div>`;
                            $('.container').append(pageDividerHtml);
                        }

                        currentPage++;

                    }

                    $('.container .post.skeleton').each(function () {

                        $(this).remove();

                    }); // Clear the skeletons before appending real posts

                    posts.forEach(post => {
                        const postTitleHref = post.post_type === 'url' ? post.content : post.permalink;

                        let contentDisplay = `<div style="display:none;" class="post-text">${post.content}</div>`;
                        
                        if(post.post_type === 'url' && post.ai_summary) {

                            contentDisplay = `<div style="display:none;" class="post-text">${post.ai_summary}<span class="ai_summary_heading">AI-generated summary</span></div>`;


                        }


                        var link = `<a href="${postTitleHref}" class="post-title single-line">${post.title}</a><i class="fas fa-plus open-content" style="float:left;"></i>`;
                        
                        if (post.post_type === 'url') {

                            link = `<a href="${postTitleHref}" class="post-title single-line" target="_blank">${post.title}<i class="fas fa-external-link-alt"></i></a><i class="fas fa-plus open-content" style="float:left;"></i>`;

                            
                        }
                        



                        

                            // Check if thumbnail exists, otherwise use a Font Awesome icon

                            let thumbnailHtml;
                            if(post.post_type === 'url' ) {
    thumbnailHtml = post.thumbnail ? `<img src="${post.thumbnail}" alt="Post Thumbnail">` : `<i class="fas fa-link"></i>`;

    // more options
// <i class="far fa-file-alt"></i>
// <i class="fas fa-link"></i>
// <i class="far fa-newspaper"></i>
// <i class="fas fa-external-link-alt"></i>
// <i class="fas fa-edit"></i>


                            } else {
                                thumbnailHtml = '<i class="fas fa-pencil-alt"></i>';
//<i class="far fa-file-alt"></i>
// <i class="far fa-file-word"></i>
// <i class="fas fa-feather-alt"></i>
// <i class="fas fa-pen-nib"></i>
// <i class="fas fa-pencil-alt"></i>
// <i class="fas fa-book"></i>



                            }


                        const postHtml = `
<div class="post" data-postId="${post.post_id}" data-postcat="${post.category}">
    <div class="post-left">
        <div class="voting">
            <a title="upvote" description="upvote" href="#" class="upvote" data-postid="${post.post_id}">
                <img src="/img/up-arrow.svg" alt="Upvote">
            </a>
            <span class="votes">${post.upvotes - post.downvotes}</span>
            <a title="downvote" description="downvote" href="#" class="downvote" data-postid="${post.post_id}">
                <img src="/img/down-arrow.svg" alt="Downvote">
            </a>
        </div>
        <div class="thumbnail">
            ${thumbnailHtml}
        </div>
    </div>
    <div class="post-content">
        ${link}
        <p class="post-submitted">submitted ${timeAgo(post.timestamp)} by <a href="#">${post.author}</a> to <a href="/c/${post.category}">${post.category}</a></p>
        <div class="post-links">
            <a href="${post.permalink}">${post.comment_count} comments</a>
            <a href="#">save</a>
        </div>
        ${contentDisplay}
    </div>
    <i class="fas fa-cog admin-actions-gear" style="float:right; cursor:pointer;" data-postid="${post.post_id}"></i>
    </div>`;

                        $('.container').append(postHtml);

                    });

                },
                error: function (error) {
                    console.error('Failed to fetch posts:', error);
                }
            });
        }


        // JavaScript for toggling the display of the content
        $('.container').on('click', '.open-content', function () {
            // Toggle the icon class between fa-plus and fa-minus
            $(this).toggleClass('fa-plus fa-minus');
            // Toggle the display of the content or iframe
            $(this).closest('.post').find('.post-iframe, .post-text').slideToggle(0);
        });



        // Initially load the default number of posts
        fetchAndDisplayPosts();



        // Function to check if we're near the bottom of the page
        function nearBottomOfPage() {
            return $(window).scrollTop() + $(window).height() > $(document).height() - 100;
        }

        // Lazy load more posts as the user scrolls down
        $(window).scroll(function () {
            if (nearBottomOfPage() && postsShown < totalNumberOfPosts) {
                //    generateAndShowPosts(postsToShowInitially);
                fetchAndDisplayPosts();
            }
        });

        $('#showMoreBtn').click(function () {
            $('.hidden').removeClass('hidden');
            $(this).hide();
        });



        $('.container').on('click', '.upvote, .downvote', function (event) {
            event.preventDefault();

            const $this = $(this);
            const $post = $this.closest('.post');
            const isUpvote = $this.hasClass('upvote');
            let voteState = $post.data('voteState') || 'none'; // Get current vote state: 'up', 'down', or 'none'

            // Determine new vote state based on current state and action
            let newVoteState = 'none';
            if (isUpvote && voteState !== 'up') {
                newVoteState = 'up';
            } else if (!isUpvote && voteState !== 'down') {
                newVoteState = 'down';
            }
            // Update the post's vote state data attribute
            $post.data('voteState', newVoteState);

            // Find the current vote count
            const $voteCountSpan = $this.siblings('.votes');
            let currentCount = parseInt($voteCountSpan.text(), 10);

            // Adjust the vote count based on the new vote state
            if (newVoteState === 'up') {
                if (voteState === 'down') currentCount += 2; // Switching from downvote to upvote
                else currentCount += 1; // Was 'none', now 'up'
            } else if (newVoteState === 'down') {
                if (voteState === 'up') currentCount -= 2; // Switching from upvote to downvote
                else currentCount -= 1; // Was 'none', now 'down'
            } else {
                // User is "unvoting", adjust count back to neutral
                currentCount += voteState === 'up' ? -1 : 1;
            }

            // Update the .votes span with the new count
            $voteCountSpan.text(currentCount);

            // Adjust visual state for buttons
            $post.find('.upvote, .downvote').removeClass('upvote-active downvote-active');
            if (newVoteState === 'up') {
                $this.addClass('upvote-active');
            } else if (newVoteState === 'down') {
                $this.addClass('downvote-active');
            }
            // Continue with your AJAX request to update the server
            $.ajax({
                url: `/api/vote/`,
                type: 'POST',
                data: {
                    upvote: isUpvote,
                    post_id: $this.data('postid')
                },
                success: function (response) {
                    console.log('Vote recorded successfully.');
                    // You might still want to log the success or handle any sync issues here
                },
                error: function (error) {
                    console.error('Failed to record vote:', error);
                    // Since we're optimistically updating the UI, consider how to handle errors
                }
            });







        });



        function pinPost(category, post_id) {
            // Retrieve the authToken stored in localStorage
            const authToken = localStorage.getItem('authToken');
            if (!authToken) {
                console.error('User is not logged in or authToken is missing.');
                return;
            }

            // Make a POST request to the pinPost API endpoint
            fetch('/api/pinPost', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${authToken}` // Use the authToken for authentication
                },
                body: JSON.stringify({ category, post_id }) // Send category and post_id in the request body
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json(); // Parse the JSON response body
                })
                .then(data => console.log(data)) // Log the response data
                .catch(error => console.error('Error pinning post:', error)); // Log any errors
        }


    });


</script>