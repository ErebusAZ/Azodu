<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>

<link rel="stylesheet" href="/style.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,400;0,500;1,400&display=swap" rel="stylesheet">

<link rel="apple-touch-icon" sizes="180x180" href="/branding/fav/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/branding/fav/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/branding/fav/favicon-16x16.png">
<link rel="manifest" href="/branding/fav/site.webmanifest">
<link rel="mask-icon" href="/branding/fav/safari-pinned-tab.svg" color="#5bbad5">
<meta name="msapplication-TileColor" content="#da532c">
<meta name="theme-color" content="#ffffff">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
<script src="/js/login.js"></script>
<script src="/js/admin.js"></script>

<script>
    function showNotification(message, type = 'info', duration = 3000, callback = null) {
        let baseClass = 'notificationBar';
        let typeClass = `notification-${type}`;

        // Check if the notificationBar already exists, if not, create it
        let $notificationBar = $('#' + baseClass);
        if ($notificationBar.length === 0) {
            $notificationBar = $('<div></div>', {
                id: baseClass,
                class: baseClass
            }).appendTo('body');
        }

        // Update message and class based on the type
        $notificationBar.text(message).removeClass().addClass(baseClass + ' ' + typeClass).fadeIn(200);

        // Hide the notificationBar after 'duration' milliseconds and execute the callback if provided
        setTimeout(function () {
            $notificationBar.fadeOut(200, function () {
                if (typeof callback === 'function') {
                    callback();
                }
            });
        }, duration);
    }

    function getThirdPathSegment(url) {
        const segments = url.split('/');
        // Assuming the URL format is always like the example you provided,
        // and there is a leading slash, making the third segment actually the fourth item.
        return segments[3]; // This will return '9' for your given example
    }


    function isJwtExpired(token) {
        if (!token) return true; // No token means "expired"

        try {
            const base64Url = token.split('.')[1]; // JWT structure: Header.Payload.Signature
            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            const payload = JSON.parse(window.atob(base64));

            // JWT exp is in seconds
            const now = new Date().getTime() / 1000; // Convert to seconds
            return payload.exp < now;
        } catch (error) {
            console.error("Error decoding token:", error);
            return true; // Assume expired on any error
        }
    }


    function requireLoginBeforeAction() {
        const authToken = localStorage.getItem('authToken');

        if (!authToken || isJwtExpired(authToken)) {
            // No token or expired token, show login modal
            $('#loginModal').show();
            return false; // Prevent the default form action or click event
        }

        return true; // User is logged in, continue with the action
    }

    $(document).on('click', 'form, textarea, .ql-editor,#subscribe_button', function (e) {
        // Check if the clicked element or any of its parents is #loginRegisterForm
        if ($(e.target).closest('#loginRegisterForm').length) {
            // If true, it means the click originated from inside #loginRegisterForm or is #loginRegisterForm itself
            // Do nothing and return early
            return;
        }

        if (!localStorage.getItem('authToken') || isJwtExpired(localStorage.getItem('authToken'))) {
            e.preventDefault(); // Prevent the default action
            // Display the login form
            $('#loginRegisterForm').css('display', 'flex');
        }
    });

    function processHTMLFromUsers(content) {
        if (!content) {
            return content;
        }
        function cleanHtmlContent(content) {
            // Replace space encoded as "&nbsp;" with a normal space
            content = content.replace(/&nbsp;/gi, ' ');

            content = content.replace(/<p(?:\s+[^>]*)?>\s*(<br\s*\/?>|\s)*<\/p>/gi, '');

            return content;
        }



        function removeDangerousTags(html) {
            // Remove script tags and their content
            html = html.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '');

            // You can add more lines here to remove other potentially dangerous tags
            // Example: Remove iframe tags
            // html = html.replace(/<iframe\b[^<]*(?:(?!<\/iframe>)<[^<]*)*<\/iframe>/gi, '');

            return html;
        }

        function removeAllAttributesExceptLinks(html) {
            // This regex looks for HTML tags that are not <a> and attempts to remove attributes inside them
            // It will leave <a href="..."> tags untouched
            const cleanHtml = html.replace(/<((?!a\b)\w+)(\s+[^>]+)?(>)/g, '<$1$3');
            return cleanHtml;
        }

        // Step 1: Clean the content (if needed, like removing &nbsp; or empty tags)
        content = cleanHtmlContent(content);

        // Step 2: Remove dangerous tags like <script>
        content = removeDangerousTags(content);

        // Step 3: Keep only <a> tags with href and optionally target="_blank", remove all other attributes
        content = content.replace(/<a\b[^>]*>/gi, function (match) {
            const hrefMatch = match.match(/\bhref="[^"]*"/i);
            const targetMatch = match.match(/\btarget="_blank"/i);
            return `<a ${hrefMatch ? hrefMatch[0] : ''} ${targetMatch ? targetMatch[0] : ''}>`;
        });

        // Step 4: Remove attributes from all other tags
        content = removeAllAttributesExceptLinks(content);

        return content;
    }


    function validateComment(content) {
        const minLength = 6;
        const maxLength = 60000;

        // Trim whitespace from start and end of the comment content
        let trimmedContent = content.trim();

        // Remove specific characters and strings for the uniqueness check
        const charsAndSpacesToRemove = /<p>|<\/p>|<|>|p|\/|\s/gi;
        trimmedContent = trimmedContent.replace(charsAndSpacesToRemove, '');


        // Check for empty content or content that only has spaces or tab characters
        if (!trimmedContent) {
            return { isValid: false, message: "Comment cannot be empty." };
        }

        // Check for content length below minimum
        if (trimmedContent.length < minLength) {
            return { isValid: false, message: `Comment must be at least ${minLength} characters long.` };
        }

        // Check for content length exceeding maximum
        if (trimmedContent.length > maxLength) {
            return { isValid: false, message: `Comment must not exceed ${maxLength} characters.` };
        }

        const unsubstantiveTexts = [
            "hi", "hello", "hey", "thanks", "thank you", "thx", "good", "great", "nice", "ok", "okay",
            "lol", "haha", "hehe", "cool", "yes", "no", "yep", "nope", "wow", "omg", "ugh", "hmm",
            "meh", "yay", "nah", "pls", "please", "bye", "goodbye", "see ya", "idk", "imo", "imho",
            "fyi", "brb", "gtg", "k", "kk", "üëç", "üëé", "üòÇ", "üòç", "üò≠", "üòä", "üòí", "üòâ", "üòú", "üôÑ"
        ];

        // Check for unsubstantive text content
        if (unsubstantiveTexts.includes(trimmedContent.toLowerCase())) {
            return { isValid: false, message: "Comment is too short or unsubstantive." };
        }

        // Check for at least 4 unique characters, ignoring specific tags and characters
        const uniqueChars = new Set(trimmedContent).size;
        if (uniqueChars < 5) {
            return { isValid: false, message: "Comment is too short or unsubstantive." };
        }

        // If the content passes all checks
        return { isValid: true, message: "" };
    }

    function timeAgo(date) {
        const intervals = [
            { label: 'year', seconds: 31536000 },
            { label: 'month', seconds: 2592000 },
            { label: 'day', seconds: 86400 },
            { label: 'hour', seconds: 3600 },
            { label: 'minute', seconds: 60 },
            { label: 'second', seconds: 1 }
        ];

        const seconds = Math.floor((Date.now() - new Date(date).getTime()) / 1000);
        const interval = intervals.find(i => i.seconds <= seconds);

        if (interval) {
            const count = Math.floor(seconds / interval.seconds);
            return `${count} ${interval.label}${count !== 1 ? 's' : ''} ago`;
        } else {
            // This line is reached if no matching interval is found
            return "just now"; // Fallback text or you can adjust this as needed
        }
    }


    function getCommentHtml(commentId, author, content, depth = 0, votes, timestamp, parent_id, linkBlacklist, postPermalink,isSaved) {
        const currentUser = localStorage.getItem('username');
        const backgroundColor = depth % 2 === 0 ? '#2d2d2d' : '#2d2d2d';

        // Check if the currentUser is the author of the comment
        const isAuthor = currentUser === author;

        // Function to check if a link should be displayed
        const shouldDisplayLink = (linkText) => {
            if (!linkBlacklist)
                return true;
            return !linkBlacklist.includes(linkText);
        };

        return `<div data-postpermalink="${postPermalink}" data-depth="${depth}" data-parentid="${parent_id}" data-commentid="${commentId}" id="comment-${commentId}" class="comment" style="background-color: ${backgroundColor}; margin-left: ${depth * 20}px;">
    <div class="voting">
        <a title="upvote" description="upvote" href="#" class="upvote" data-postid="${commentId}"><img src="/img/up-arrow.svg" alt="Upvote"></a>
        <span class="votes">${votes}</span>
        <a title="downvote" description="downvote" href="#" class="downvote" data-postid="${commentId}"><img src="/img/down-arrow.svg" alt="Downvote"></a>
    </div>
    <div class="comment-content">
        <div class="comment-header">
            <a href="/u/${author}" class="username">${author}</a>
            <span class="time">${timestamp ? timeAgo(timestamp) : 'just now'}</span>
        </div>
        <div class="comment-text">${content}</div>

        <div class="comment-links">
            <a target="_blank" href="${postPermalink}#comment-${commentId}">link</a>` + 
            (isSaved ? '<a href="#" class="unsave_comment">unsave</a>' : '<a href="#" class="save_comment">save</a>') + `
            ${isAuthor && shouldDisplayLink('edit') ? `<a href="#edit" class="edit">edit</a>` : ''}
            ${isAuthor && shouldDisplayLink('delete') ? `<a href="#delete" class="delete">delete</a>` : ''}
            ${shouldDisplayLink('reply') ? `<a href="#reply" class="reply">reply</a>` : ''}
        </div>
        
        <div class="reply-form" style="display: none;">
            <div class="reply-input"></div>
            <div class="status-message" style="color: red; display: none;"></div>
            <button type="button" class="submit-reply" data-postid="${commentId}">Submit</button>
            <button type="button" class="cancel-reply">Cancel</button>
        </div>
    </div>
</div>`;
    }

    function generatePostHtml(post, isSaved) {

        const postTitleHref = post.post_type === 'url' ? post.content : post.permalink;
        let contentDisplay = post.post_type === 'url' && post.ai_summary ?
            `<div style="display:none;" class="post-text">${post.ai_summary}<span class="ai_summary_heading">AI-generated summary</span></div>` :
            `<div style="display:none;" class="post-text">${post.content}</div>`;

        const link = post.post_type === 'url' ?
            `<a href="${postTitleHref}" class="post-title single-line" target="_blank">${post.title}<i class="fas fa-external-link-alt"></i></a><i class="fas fa-plus open-content" style="float:left;"></i>` :
            `<a href="${postTitleHref}" class="post-title single-line">${post.title}</a><i class="fas fa-plus open-content" style="float:left;"></i>`;

        const thumbnailHtml = post.thumbnail ? `<img src="${post.thumbnail}" alt="Post Thumbnail">` : `<i class="fas fa-${post.post_type === 'url' ? 'link' : 'pencil-alt'}"></i>`;

        return `
<div class="post" data-postId="${post.post_id}" data-postcat="${post.category}">
    <div class="post-left">
        <div class="voting">
            <a title="upvote" description="upvote" href="#" class="upvote" data-postid="${post.post_id}">
                <img src="/img/up-arrow.svg" alt="Upvote">
            </a>
            <span class="votes">${post.upvotes - post.downvotes}</span>
            <a title="downvote" description="downvote" href="#" class="downvote" data-postid="${post.post_id}">
                <img src="/img/down-arrow.svg" alt="Downvote">
            </a>
        </div>
        <div class="thumbnail">${thumbnailHtml}</div>
    </div>
    <div class="post-content">
        ${link}
        <p class="post-submitted">submitted ${timeAgo(post.timestamp)} by <a href="/u/${post.author}">${post.author}</a> to <a href="/c/${post.category}">${post.category}</a></p>
        <div class="post-links">
            <a href="${post.permalink}">${post.comment_count} comments</a>
            ` + (isSaved ? '<a href="#" class="unsave_post">unsave</a>' : '<a href="#" class="save_post">save</a>') + `
        </div>
        ${contentDisplay}
    </div>
    <i class="fas fa-cog admin-actions-gear admin-ui" style="float:right; cursor:pointer;" data-postid="${post.post_id}"></i>
</div>`;
    }


    $(document).on('click', '.delete', function (e) {
        e.preventDefault();
        const $comment = $(this).closest('.comment');
        const commentId = $comment.data('commentid');
        const parentId = $comment.data('parentid');
        const originalPostID = getThirdPathSegment($comment.data('postpermalink'));

        const confirmed = confirm('Are you sure you want to delete this comment?');
        if (confirmed) {
            deleteComment(commentId, originalPostID);
        }
    });

    function deleteComment(commentId, postID) {
        const authToken = localStorage.getItem('authToken');
        // Prepare the request payload indicating a deletion action
        const data = JSON.stringify({
            commentId: commentId,
            isDelete: true, // Indicate this is a delete operation
            post_id: postID,
            isEdit: false

        });

        $.ajax({
            url: `/api/comment`, // Adjusted to the generalized endpoint for comment management
            type: 'POST', // Using POST as per the updated backend endpoint
            contentType: 'application/json', // Specify the content type of the request
            headers: {
                'Authorization': `Bearer ${authToken}`
            },
            data: data, // Pass the stringified payload
            success: function () {
                console.log('Comment deleted successfully');
                // Optionally remove the comment from the DOM or refresh the comments section
                $(`#comment-${commentId}`).remove();
            },
            error: function (xhr, status, error) {
                console.error('Error deleting comment', error);
                var commentDiv = $('div[data-commentid="' + commentId + '"]');

                showNotification('Error deleting comment: ' + error, 'error', 5000);

                // Handle the error (show a message to the user, log the error, etc.)
            }
        });
    }


    $(document).ready(function () {


        $('body').on('click', '.edit', function (e) {
            e.preventDefault();

            const $comment = $(this).closest('.comment');
            const $commentContent = $comment.find('.comment-content');
            const originalContentHtml = $commentContent.find('.comment-text').html(); // Assuming the comment text is in <p>
            const $commentLinks = $comment.find('.comment-links');
            const postID = $comment.data('commentid');
            const permalink = $comment.data('postpermalink');
            const originalPostID = getThirdPathSegment(permalink); // get the original post id from the permalink



            // Remove any existing editor to prevent duplicates
            $commentContent.find('.quill-editing, .edit-actions').remove();

            // Hide the original comment content and links
            $commentContent.find('.comment-text, .edit').hide();
            $commentLinks.hide();


            // Determine the current background color of the comment
            const currentBgColor = $comment.css('background-color');
            // Alternate background colors
            const bgColor1 = 'rgb(38, 38, 38)'; // #262626
            const bgColor2 = 'rgb(45, 45, 45)'; // #2d2d2d
            // Determine the new background color
            const newBgColor = currentBgColor === bgColor1 ? bgColor2 : bgColor1;

            // Remove any existing Quill editors to prevent duplicates
            $commentContent.find('.quill-editing').remove();
            $commentContent.find('.comment-text, .edit').hide();

            // Append a Quill editor container
            const quillContainer = $('<div>').addClass('quill-editing ql-container ql-snow').appendTo($commentContent);

            // Initialize Quill on the new container
            const quillEditor = new Quill(quillContainer.get(0), {
                theme: 'snow',
                modules: {
                    toolbar: [
                        ['bold', 'italic', 'underline', 'strike', 'blockquote'],
                        [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                        ['link']
                    ]
                },
            });


            quillEditor.root.innerHTML = originalContentHtml;

            // Apply the determined background color directly to the '.ql-editor' inside the Quill container
            $(quillEditor.root).css('background-color', newBgColor);


            // Append Save and Cancel buttons
            const actionsHtml = `
    <div class="edit-actions">
        <div class="status-message" style="color: red; display: none;"></div>
        <button class="save-edit">Save</button>
        <button class="cancel-edit">Cancel</button>
    </div>`;
            $(actionsHtml).appendTo($commentContent);
            const $toolbar = $comment.find('.ql-toolbar');


            // Handle the cancel action
            $commentContent.find('.cancel-edit').on('click', function () {

                quillContainer.remove(); // This should correctly remove the Quill editor container
                $toolbar.remove();
                $commentContent.find('.edit-actions').remove(); // Remove the action buttons
                $commentContent.find('.comment-text, .edit').show(); // Show the original content and edit link
                $commentLinks.show(); // Show the comment links again
            });

            // Handle save (similar to your submit logic but for updating existing comments)
            const saveBtn = $comment.find('.save-edit');
            const cancelBtn = $comment.find('.cancel-edit');

            const authToken = localStorage.getItem('authToken');


            saveBtn.on('click', function () {
                const updatedContent = processHTMLFromUsers(quillEditor.root.innerHTML);
                var result = validateComment(updatedContent);
                if (!result.isValid) {

                    var $statusMessage = $(this).parent().find('.status-message');

                    $statusMessage.text(result.message).css('color', 'red').show().delay(3000).fadeOut();

                    return;
                }
                $.ajax({
                    url: '/api/comment',
                    type: 'POST',
                    contentType: 'application/json',
                    headers: {
                        'Authorization': `Bearer ${authToken}` // Include the auth token in the request headers
                    },
                    data: JSON.stringify({ commentId: postID, post_id: originalPostID, content: updatedContent, isEdit: true, postPermalink: originalPostID }),
                    success: function (response) {
                        console.log('edit comment success');
                        quillContainer.remove();
                        $toolbar.remove();


                        $commentContent.find('.comment-text').html(updatedContent).show();
                        quillEditor.container.remove();
                        saveBtn.remove();
                        cancelBtn.remove();
                        $commentContent.find('.edit').show();
                        $commentLinks.show();

                    },
                    error: function (xhr, status, error) {
                        var $statusMessage = $comment.find('.status-message');
                        console.error('Error submitting comment', error);
                        $statusMessage.text(error.includes('error') ? error : 'Error submitting comment: ' + error).css('color', 'red').show().delay(3000).fadeOut();
                    }
                });


            });



        });


        $('.container').on('click', '.upvote, .downvote', function (event) {
            event.preventDefault();

            const $this = $(this);
            const $post = $this.closest('.post');
            const isUpvote = $this.hasClass('upvote');
            let voteState = $post.data('voteState') || 'none'; // Get current vote state: 'up', 'down', or 'none'

            // Determine new vote state based on current state and action
            let newVoteState = 'none';
            if (isUpvote && voteState !== 'up') {
                newVoteState = 'up';
            } else if (!isUpvote && voteState !== 'down') {
                newVoteState = 'down';
            }
            // Update the post's vote state data attribute
            $post.data('voteState', newVoteState);

            // Find the current vote count
            const $voteCountSpan = $this.siblings('.votes');
            let currentCount = parseInt($voteCountSpan.text(), 10);

            // Adjust the vote count based on the new vote state
            if (newVoteState === 'up') {
                if (voteState === 'down') currentCount += 2; // Switching from downvote to upvote
                else currentCount += 1; // Was 'none', now 'up'
            } else if (newVoteState === 'down') {
                if (voteState === 'up') currentCount -= 2; // Switching from upvote to downvote
                else currentCount -= 1; // Was 'none', now 'down'
            } else {
                // User is "unvoting", adjust count back to neutral
                currentCount += voteState === 'up' ? -1 : 1;
            }

            // Update the .votes span with the new count
            $voteCountSpan.text(currentCount);

            // Adjust visual state for buttons
            $post.find('.upvote, .downvote').removeClass('upvote-active downvote-active');
            if (newVoteState === 'up') {
                $this.addClass('upvote-active');
            } else if (newVoteState === 'down') {
                $this.addClass('downvote-active');
            }
            // Continue with your AJAX request to update the server
            $.ajax({
                url: `/api/vote/`,
                type: 'POST',
                data: {
                    upvote: isUpvote,
                    post_id: $this.data('postid')
                },
                success: function (response) {
                    console.log('Vote recorded successfully.');
                    // You might still want to log the success or handle any sync issues here
                },
                error: function (error) {
                    console.error('Failed to record vote:', error);
                    // Since we're optimistically updating the UI, consider how to handle errors
                }
            });







        });





        // Handler for "unsave" button click
        $('.container').on('click', '.unsave_post', function (event) {
            event.preventDefault(); // Prevent default action

            // Retrieve the username from localStorage
            const username = localStorage.getItem('username');
            if (!username) {
                console.error('User is not logged in.');
                return; // Exit if no user is logged in
            }

            // Capture the button before the AJAX request
            const $button = $(this);

            // Get the post ID from the closest .post element
            const $post = $button.closest('.post');
            const postId = $post.data('postid');
            const authToken = localStorage.getItem('authToken'); // Assuming the auth token is saved in localStorage

            // Make an AJAX request to unsave the post
            $.ajax({
                url: '/api/unsavePost', // Endpoint for unsaving a post
                type: 'POST',
                contentType: 'application/json',
                headers: {
                    'Authorization': `Bearer ${authToken}` // Use the authToken for authorization
                },
                data: JSON.stringify({ postId: postId }), // Send the postId in the request body
                success: function (response) {
                    // Remove the post from the DOM
                    $(`div.post[data-postid="${postId}"]`).fadeOut("slow", function () {
                        $(this).remove();
                    });
                    console.log('Post unsaved successfully:', response);
                    alert('Post unsaved successfully!');
                    $button.text('Save'); // Change the button text back to "Save"
                    $button.removeClass('unsave_post').addClass('save_post'); // Change the class to reflect the new action
                },
                error: function (xhr, status, error) {
                    console.error('Failed to unsave post:', error);
                    alert('Failed to unsave post. Please try again.');
                }
            });
        });


        // Handler for "unsave comment" button click
        $('.container').on('click', '.unsave_comment', function (event) {
            event.preventDefault(); // Prevent default action

            // Retrieve the username from localStorage (assuming user management is in place)
            const username = localStorage.getItem('username');
            if (!username) {
                console.error('User is not logged in.');
                return; // Exit if no user is logged in
            }

            // Capture the button before the AJAX request
            const $button = $(this);

            // Get the comment ID and post ID from the closest .comment element
            const $comment = $button.closest('.comment');
            const commentId = $comment.data('commentid');
            const postId = getThirdPathSegment($(this).closest('.comment').data('postpermalink'));
            const authToken = localStorage.getItem('authToken'); // Assuming the auth token is saved in localStorage
            // Make an AJAX request to unsave the comment
            $.ajax({
                url: '/api/unsaveComment', // Endpoint for unsaving a comment
                type: 'POST',
                contentType: 'application/json',
                headers: {
                    'Authorization': `Bearer ${authToken}` // Use the authToken for authorization
                },
                data: JSON.stringify({ commentId: commentId, postId: postId }), // Send both commentId and postId in the request body
                success: function (response) {
                    // Remove the comment from the DOM or perform any other UI update
                    $(`div.comment[data-commentid="${commentId}"]`).fadeOut("slow", function () {
                        $(this).remove();
                    });
                    console.log('Comment unsaved successfully:', response);

                },
                error: function (xhr, status, error) {
                    console.error('Failed to unsave comment:', error);
                    alert('Failed to unsave comment. Please try again.');
                }
            });
        });




        // JavaScript for toggling the display of the content
        $('.container').on('click', '.open-content', function () {
            // Toggle the icon class between fa-plus and fa-minus
            $(this).toggleClass('fa-plus fa-minus');
            // Toggle the display of the content or iframe
            $(this).closest('.post').find('.post-iframe, .post-text').slideToggle(0);
        });



    });

</script>


</head>

<body>

    <div id="account_info">
        <div id="userDisplay" style="display: none;"></div>
        <a id="logoutButton" href="#" id="logoutButton" style="display: none;">[logout]</a>
    </div>


    <div id="logo_cont">
        <a href="/"><img style="display: none; width: 34px;padding-right: 10px;" src="/branding/azodu-icon.png" /><img
                id="logo_satori1" src="/branding/azodu.png" /></a>
    </div>

    <div id="loginRegisterForm" class="lightbox" style="display: none;">
        <div class="lightbox-content">
            <h2 id="formTitle">Login</h2>
            <form id="authForm">
                <input type="text" id="username" placeholder="Username" required>
                <input type="password" id="password" placeholder="Password" required>
                <input type="submit" id="submitAuth" value="Login">
                <div id="formMessage" style="color: #d7dadc; margin-top: 10px;"></div> <!-- Message placeholder -->
                <p id="switchAuthMode">Don't have an account? <a href="#" id="switchForm">Register here.</a></p>
            </form>
        </div>
    </div>